(()=>{"use strict";var n={576:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap);"]),i.push([n.id,'\n:root {\n  --size-7: 2rem;\n  --size-4: 1.25rem;\n  --size-6: 1.75rem;\n  --radius-2: 5px;\n  --size-2: .5rem;\n  --font-size-5: 2rem;\n  --font-letterspacing-3: .075em;\n  --font-weight-7: 700;\n  --size-8: 3rem;\n  --border-size-1: 1px;\n  --size-1: .25rem;\n  --size-3: 1rem;\n  --font-letterspacing-2: .050em;\n  --size-5: 1.5rem;\n  --radius-1: 2px;\n  --size-11: 7.5rem;\n}\n/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role="list"],\nol[role="list"] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don\'t have a class get default styles */\na:not([class]) {\n  -webkit-text-decoration-skip: ink;\n          text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n    scroll-behavior: auto;\n  }\n\n  *,\n  *::before,\n  *::after {\n    -webkit-animation-duration: 0.01ms !important;\n            animation-duration: 0.01ms !important;\n    -webkit-animation-iteration-count: 1 !important;\n            animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n/* ********************************* */\n\n:root {\n  --bg-color: #fbf1c7;\n  --container-bg-color: #f9f5d7;\n  --container-border-color: #d5c4a1;\n  --hdg-color: #3c3836;\n  --border-color: #d5c4a1;\n\n  --project-active-color: #282828;\n  --project-bg-color: var(--border-color);\n\n  --text-color: #3c3836;\n\n  --input-bg-color: var(--bg-color);\n  --input-text-color: var(--project-active-color);\n  --input-border-color: #a89984;\n\n  --task-title-color: #076678;\n  --task-description-color: #427b58;\n  --task-date-color: #8f3f71;\n  --task-priority-color: #af3a03;\n\n  --delete-hover-color: #9d0006;\n\n  --selection-bg-color: #af3a03;\n  --selection-text-color: #f9f5d7;\n}\n\n:root.dark {\n  --bg-color: #282828;\n  --container-bg-color: #1d2021;\n  --container-border-color: #504945;\n  --hdg-color: #ebdbb2;\n  --border-color: #504945;\n\n  --project-active-color: #fbf1c7;\n  --project-bg-color: var(--border-color);\n\n  --text-color: #ebdbb2;\n\n  --input-bg-color: var(--bg-color);\n  --input-text-color: var(--project-active-color);\n  --input-border-color: #7c6f64;\n\n  --task-title-color: #83a598;\n  --task-description-color: #8ec07c;\n  --task-date-color: #d3869b;\n  --task-priority-color: #fe8019;\n\n  --delete-hover-color: #fb4934;\n}\n\nbody {\n  font-family: "JetBrains Mono", monospace;\n  padding: var(--size-7);\n  background-color: var(--bg-color);\n  color: var(--text-color);\n}\n\n.container {\n  position: relative;\n  max-width: 42rem;\n  padding: var(--size-4) var(--size-6);\n  margin-inline: auto;\n  border: 1px solid var(--container-border-color);\n  border-radius: var(--radius-2);\n  background-color: var(--container-bg-color);\n}\n\n.theme-switch {\n  position: absolute;\n  top: var(--size-2);\n  right: var(--size-2);\n}\n\n.logo {\n  font-size: var(--font-size-5);\n  font-style: italic;\n  letter-spacing: var(--font-letterspacing-3);\n  font-weight: var(--font-weight-7);\n  -webkit-margin-after: var(--size-7);\n          margin-block-end: var(--size-7);\n}\n\nh1,\nh2,\nh3 {\n  color: var(--hdg-color);\n}\n\n/* **************** */\n/* Projects Section */\n.projects {\n  margin-bottom: var(--size-8);\n}\n\n.projects-heading {\n  margin-bottom: var(--size-2);\n}\n\n.projects-title {\n  text-decoration: underline;\n  margin-bottom: var(--size-2);\n}\n\n.btn {\n  background: none;\n  border: var(--border-size-1) solid var(--border-color);\n  padding: var(--size-1) var(--size-3);\n  border-radius: var(--radius-2);\n  cursor: pointer;\n  color: var(--text-color);\n}\n\n.btn:hover {\n  background-color: var(--project-active-color);\n  color: var(--project-bg-color);\n}\n\n.btn:active {\n  background-color: var(--text-color);\n}\n\n.btn-emp,\n.btn-save,\n.btn-edit-save {\n  background-color: var(--project-active-color);\n  color: var(--project-bg-color);\n}\n\n.btn-add-project {\n  width: 100%;\n}\n\n.project-form {\n  display: flex;\n  gap: var(--size-2);\n  width: 100%;\n}\n\n#project-name {\n  flex: 1;\n  padding-inline: var(--size-2);\n  border-radius: var(--radius-2);\n}\n\n.projects-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--size-2);\n}\n\n.projects-list > a {\n  text-decoration: none;\n}\n\n.projects-list > a:hover,\n.projects-list > a:active {\n  text-decoration: none;\n  border: var(--border-size-1) solid var(--border-color);\n  background-color: var(--project-active-color);\n  color: var(--project-bg-color);\n}\n\n.project {\n  border: var(--border-size-1) solid var(--border-color);\n  background-color: var(--project-bg-color);\n  color: var(--text-color);\n  border-radius: var(--radius-2);\n  padding: var(--size-1) var(--size-4);\n  letter-spacing: var(--font-letterspacing-2);\n}\n\n.active {\n  border: var(--border-size-1) solid var(--border-color);\n  background-color: var(--project-active-color);\n  color: var(--project-bg-color);\n}\n\n/* *************** */\n\ninput[type="text"],\ninput[type="date"],\nselect {\n  background-color: var(--input-bg-color);\n  border: var(--border-size-1) solid var(--input-border-color);\n  border-radius: var(--radius-2);\n  color: var(--input-text-color);\n}\n\n/* ************** */\n/* Tasks Section */\n.tasks {\n  margin-top: var(--size-4);\n}\n\n.tasks-heading {\n  text-decoration: underline;\n  margin-bottom: var(--size-2);\n}\n\n.tasks-list {\n  margin-top: var(--size-3);\n}\n\n.btn-add-task {\n  width: 100%;\n}\n\n.task {\n  display: flex;\n  align-items: center;\n  gap: var(--size-3);\n  border: var(--border-size-1) solid var(--border-color);\n  border-radius: var(--radius-2);\n  padding: var(--size-3);\n  margin-bottom: var(--size-3);\n  font-weight: var(--font-weight-7);\n}\n\n.task-title {\n  color: var(--task-title-color);\n}\n\n.task-desc {\n  color: var(--task-description-color);\n}\n\n.task-due {\n  color: var(--task-date-color);\n}\n\n.task-priority {\n  color: var(--task-priority-color);\n}\n\n.task:hover {\n  outline: 2px solid;\n}\n\ninput[type="checkbox"] {\n  cursor: pointer;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  background-color: var(--container-bg-color);\n  margin: 0;\n\n  font: inherit;\n  color: currentColor;\n  width: var(--size-5);\n  height: var(--size-5);\n  border: 0.15em solid currentColor;\n  border-radius: var(--radius-2);\n  /* transform: translateY(-0.075em); */\n\n  display: grid;\n  place-content: center;\n}\n\ninput[type="checkbox"]::before {\n  content: "";\n  width: var(--size-3);\n  height: var(--size-3);\n  transform: scale(0);\n  transition: 60ms transform ease-in-out;\n  box-shadow: inset 1em 1em var(--project-active-color);\n  border-radius: var(--radius-1);\n}\n\ninput[type="checkbox"]:checked::before {\n  transform: scale(1);\n}\n\ninput[type="checkbox"]:focus {\n  outline: max(2px, 0.15em) solid currentColor;\n  outline-offset: max(2px, 0.15em);\n}\n\n.task-details {\n  display: flex;\n  gap: var(--size-2);\n  flex: 1;\n}\n\n.task-info {\n  margin-left: auto;\n  text-align: end;\n}\n\n.btn-edit {\n  border: none;\n}\n\n/* Add Task Form */\n\n.add-task-form,\n.edit-task-form {\n  border: 1px solid var(--border-color);\n  display: flex;\n  flex-direction: column;\n  gap: var(--size-2);\n  padding: var(--size-3);\n  margin-block: var(--size-3);\n  border-radius: var(--radius-2);\n}\n\n.add-task-form input,\n.add-task-form select,\n.edit-task-form input,\n.edit-task-form select {\n  width: 100%;\n  padding: var(--size-1);\n}\n\n.add-task-form label,\n.edit-task-form label {\n  display: block;\n}\n\n.add-task-form div,\n.edit-task-form div {\n  flex: 1;\n}\n\n.add-task-form button,\n.edit-task-form button {\n  padding: var(--size-1) var(--size-2);\n  cursor: pointer;\n  width: var(--size-11);\n}\n\n.form-buttons-container {\n  align-self: end;\n}\n\n.delete {\n  display: block;\n  background: none;\n  color: inherit;\n  border: none;\n  cursor: pointer;\n  margin-top: var(--size-7);\n  margin-inline: auto;\n  border-radius: var(--radius-2);\n}\n\n.delete:hover {\n  outline: 3px dotted var(--delete-hover-color);\n  color: var(--delete-hover-color);\n}\n\n::-moz-selection {\n  background-color: var(--selection-bg-color);\n  color: var(--selection-text-color);\n}\n\n::selection {\n  background-color: var(--selection-bg-color);\n  color: var(--selection-text-color);\n}\n\n@media only screen and (max-width: 540px) {\n  .task-details {\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n  }\n\n  .task-info {\n    margin: 0;\n    text-align: center;\n  }\n\n  body {\n    padding: var(--size-2);\n  }\n\n  .container {\n    padding: var(--size-2);\n  }\n}\n\n.hidden {\n  display: none;\n}\n',"",{version:3,sources:["<no source>","webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[null,'/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role="list"],\nol[role="list"] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don\'t have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n    scroll-behavior: auto;\n  }\n\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n/* ********************************* */\n\n@import url("https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap");\n\n:root {\n  --bg-color: #fbf1c7;\n  --container-bg-color: #f9f5d7;\n  --container-border-color: #d5c4a1;\n  --hdg-color: #3c3836;\n  --border-color: #d5c4a1;\n\n  --project-active-color: #282828;\n  --project-bg-color: var(--border-color);\n\n  --text-color: #3c3836;\n\n  --input-bg-color: var(--bg-color);\n  --input-text-color: var(--project-active-color);\n  --input-border-color: #a89984;\n\n  --task-title-color: #076678;\n  --task-description-color: #427b58;\n  --task-date-color: #8f3f71;\n  --task-priority-color: #af3a03;\n\n  --delete-hover-color: #9d0006;\n\n  --selection-bg-color: #af3a03;\n  --selection-text-color: #f9f5d7;\n}\n\n:root.dark {\n  --bg-color: #282828;\n  --container-bg-color: #1d2021;\n  --container-border-color: #504945;\n  --hdg-color: #ebdbb2;\n  --border-color: #504945;\n\n  --project-active-color: #fbf1c7;\n  --project-bg-color: var(--border-color);\n\n  --text-color: #ebdbb2;\n\n  --input-bg-color: var(--bg-color);\n  --input-text-color: var(--project-active-color);\n  --input-border-color: #7c6f64;\n\n  --task-title-color: #83a598;\n  --task-description-color: #8ec07c;\n  --task-date-color: #d3869b;\n  --task-priority-color: #fe8019;\n\n  --delete-hover-color: #fb4934;\n}\n\nbody {\n  font-family: "JetBrains Mono", monospace;\n  padding: var(--size-7);\n  background-color: var(--bg-color);\n  color: var(--text-color);\n}\n\n.container {\n  position: relative;\n  max-width: 42rem;\n  padding: var(--size-4) var(--size-6);\n  margin-inline: auto;\n  border: 1px solid var(--container-border-color);\n  border-radius: var(--radius-2);\n  background-color: var(--container-bg-color);\n}\n\n.theme-switch {\n  position: absolute;\n  top: var(--size-2);\n  right: var(--size-2);\n}\n\n.logo {\n  font-size: var(--font-size-5);\n  font-style: italic;\n  letter-spacing: var(--font-letterspacing-3);\n  font-weight: var(--font-weight-7);\n  margin-block-end: var(--size-7);\n}\n\nh1,\nh2,\nh3 {\n  color: var(--hdg-color);\n}\n\n/* **************** */\n/* Projects Section */\n.projects {\n  margin-bottom: var(--size-8);\n}\n\n.projects-heading {\n  margin-bottom: var(--size-2);\n}\n\n.projects-title {\n  text-decoration: underline;\n  margin-bottom: var(--size-2);\n}\n\n.btn {\n  background: none;\n  border: var(--border-size-1) solid var(--border-color);\n  padding: var(--size-1) var(--size-3);\n  border-radius: var(--radius-2);\n  cursor: pointer;\n  color: var(--text-color);\n}\n\n.btn:hover {\n  background-color: var(--project-active-color);\n  color: var(--project-bg-color);\n}\n\n.btn:active {\n  background-color: var(--text-color);\n}\n\n.btn-emp,\n.btn-save,\n.btn-edit-save {\n  background-color: var(--project-active-color);\n  color: var(--project-bg-color);\n}\n\n.btn-add-project {\n  width: 100%;\n}\n\n.project-form {\n  display: flex;\n  gap: var(--size-2);\n  width: 100%;\n}\n\n#project-name {\n  flex: 1;\n  padding-inline: var(--size-2);\n  border-radius: var(--radius-2);\n}\n\n.projects-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--size-2);\n}\n\n.projects-list > a {\n  text-decoration: none;\n}\n\n.projects-list > a:hover,\n.projects-list > a:active {\n  text-decoration: none;\n  border: var(--border-size-1) solid var(--border-color);\n  background-color: var(--project-active-color);\n  color: var(--project-bg-color);\n}\n\n.project {\n  border: var(--border-size-1) solid var(--border-color);\n  background-color: var(--project-bg-color);\n  color: var(--text-color);\n  border-radius: var(--radius-2);\n  padding: var(--size-1) var(--size-4);\n  letter-spacing: var(--font-letterspacing-2);\n}\n\n.active {\n  border: var(--border-size-1) solid var(--border-color);\n  background-color: var(--project-active-color);\n  color: var(--project-bg-color);\n}\n\n/* *************** */\n\ninput[type="text"],\ninput[type="date"],\nselect {\n  background-color: var(--input-bg-color);\n  border: var(--border-size-1) solid var(--input-border-color);\n  border-radius: var(--radius-2);\n  color: var(--input-text-color);\n}\n\n/* ************** */\n/* Tasks Section */\n.tasks {\n  margin-top: var(--size-4);\n}\n\n.tasks-heading {\n  text-decoration: underline;\n  margin-bottom: var(--size-2);\n}\n\n.tasks-list {\n  margin-top: var(--size-3);\n}\n\n.btn-add-task {\n  width: 100%;\n}\n\n.task {\n  display: flex;\n  align-items: center;\n  gap: var(--size-3);\n  border: var(--border-size-1) solid var(--border-color);\n  border-radius: var(--radius-2);\n  padding: var(--size-3);\n  margin-bottom: var(--size-3);\n  font-weight: var(--font-weight-7);\n}\n\n.task-title {\n  color: var(--task-title-color);\n}\n\n.task-desc {\n  color: var(--task-description-color);\n}\n\n.task-due {\n  color: var(--task-date-color);\n}\n\n.task-priority {\n  color: var(--task-priority-color);\n}\n\n.task:hover {\n  outline: 2px solid;\n}\n\ninput[type="checkbox"] {\n  cursor: pointer;\n  appearance: none;\n  background-color: var(--container-bg-color);\n  margin: 0;\n\n  font: inherit;\n  color: currentColor;\n  width: var(--size-5);\n  height: var(--size-5);\n  border: 0.15em solid currentColor;\n  border-radius: var(--radius-2);\n  /* transform: translateY(-0.075em); */\n\n  display: grid;\n  place-content: center;\n}\n\ninput[type="checkbox"]::before {\n  content: "";\n  width: var(--size-3);\n  height: var(--size-3);\n  transform: scale(0);\n  transition: 60ms transform ease-in-out;\n  box-shadow: inset 1em 1em var(--project-active-color);\n  border-radius: var(--radius-1);\n}\n\ninput[type="checkbox"]:checked::before {\n  transform: scale(1);\n}\n\ninput[type="checkbox"]:focus {\n  outline: max(2px, 0.15em) solid currentColor;\n  outline-offset: max(2px, 0.15em);\n}\n\n.task-details {\n  display: flex;\n  gap: var(--size-2);\n  flex: 1;\n}\n\n.task-info {\n  margin-left: auto;\n  text-align: end;\n}\n\n.btn-edit {\n  border: none;\n}\n\n/* Add Task Form */\n\n.add-task-form,\n.edit-task-form {\n  border: 1px solid var(--border-color);\n  display: flex;\n  flex-direction: column;\n  gap: var(--size-2);\n  padding: var(--size-3);\n  margin-block: var(--size-3);\n  border-radius: var(--radius-2);\n}\n\n.add-task-form input,\n.add-task-form select,\n.edit-task-form input,\n.edit-task-form select {\n  width: 100%;\n  padding: var(--size-1);\n}\n\n.add-task-form label,\n.edit-task-form label {\n  display: block;\n}\n\n.add-task-form div,\n.edit-task-form div {\n  flex: 1;\n}\n\n.add-task-form button,\n.edit-task-form button {\n  padding: var(--size-1) var(--size-2);\n  cursor: pointer;\n  width: var(--size-11);\n}\n\n.form-buttons-container {\n  align-self: end;\n}\n\n.delete {\n  display: block;\n  background: none;\n  color: inherit;\n  border: none;\n  cursor: pointer;\n  margin-top: var(--size-7);\n  margin-inline: auto;\n  border-radius: var(--radius-2);\n}\n\n.delete:hover {\n  outline: 3px dotted var(--delete-hover-color);\n  color: var(--delete-hover-color);\n}\n\n::selection {\n  background-color: var(--selection-bg-color);\n  color: var(--selection-text-color);\n}\n\n@media only screen and (max-width: 540px) {\n  .task-details {\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n  }\n\n  .task-info {\n    margin: 0;\n    text-align: center;\n  }\n\n  body {\n    padding: var(--size-2);\n  }\n\n  .container {\n    padding: var(--size-2);\n  }\n}\n\n.hidden {\n  display: none;\n}\n'],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],l=a[A]||0,d="".concat(A," ").concat(l);a[A]=l+1;var u=t(d),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var v=o(m,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:v,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),A=0;A<a.length;A++){var l=t(a[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),s=t(565),c=t.n(s),A=t(216),l=t.n(A),d=t(589),u=t.n(d),m=t(576),v={};v.styleTagTransform=u(),v.setAttributes=c(),v.insert=i().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=l(),e()(m.Z,v),m.Z&&m.Z.locals&&m.Z.locals;const f=new class{constructor(){this.projects=[],this.currentProjectID="",this.currentTaskID="",this.tasks=[]}addProject(n){this.projects.push(n),this.currentProjectID=n.id,this.saveToLocalStorage()}addTask(n){this.tasks.push(n),this.saveToLocalStorage()}deleteTask(n){const e=this.tasks.findIndex((e=>e.id===n));this.tasks.splice(e,1),this.saveToLocalStorage()}editTask(n,e,t,r,o){const a=this.tasks.findIndex((e=>e.id===n));this.tasks[a].title=e,this.tasks[a].description=t,this.tasks[a].date=r,this.tasks[a].priority=o,this.saveToLocalStorage()}getTask(n){const e=this.tasks.findIndex((e=>e.id===n));return this.tasks[e]}setCurrentProject(n){this.currentProjectID=n,this.saveToLocalStorage()}saveToLocalStorage(){localStorage.setItem("projects",JSON.stringify(this.projects)),localStorage.setItem("tasks",JSON.stringify(this.tasks)),localStorage.setItem("currentProjectID",this.currentProjectID)}loadProjects(){this.projects=JSON.parse(localStorage.getItem("projects"))}loadTasks(){this.tasks=JSON.parse(localStorage.getItem("tasks"))}loadCurrentProjectID(){this.currentProjectID=localStorage.getItem("currentProjectID")}};var p,h=new Uint8Array(16);function g(){if(!p&&!(p="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return p(h)}const C=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,b=function(n){return"string"==typeof n&&C.test(n)};for(var E=[],B=0;B<256;++B)E.push((B+256).toString(16).substr(1));const k=function(n,e,t){var r=(n=n||{}).random||(n.rng||g)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e){t=t||0;for(var o=0;o<16;++o)e[t+o]=r[o];return e}return function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(E[n[e+0]]+E[n[e+1]]+E[n[e+2]]+E[n[e+3]]+"-"+E[n[e+4]]+E[n[e+5]]+"-"+E[n[e+6]]+E[n[e+7]]+"-"+E[n[e+8]]+E[n[e+9]]+"-"+E[n[e+10]]+E[n[e+11]]+E[n[e+12]]+E[n[e+13]]+E[n[e+14]]+E[n[e+15]]).toLowerCase();if(!b(t))throw TypeError("Stringified UUID is invalid");return t}(r)};class y{constructor(n){this.name=n,this.id=k()}}class w{constructor(n,e,t,r,o){this.title=n,this.description=e,this.date=t,this.priority=r,this.projectID=o,this.id=k()}}const x=function(n){const e=new y(n);f.addProject(e)};function j(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function z(n){j(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function D(n,e){j(2,arguments);var t=z(n),r=z(e),o=t.getTime()-r.getTime();return o<0?-1:o>0?1:o}function S(n,e){j(2,arguments);var t=z(n),r=z(e),o=t.getFullYear()-r.getFullYear(),a=t.getMonth()-r.getMonth();return 12*o+a}function M(n){j(1,arguments);var e=z(n);return e.setHours(23,59,59,999),e}function T(n){j(1,arguments);var e=z(n),t=e.getMonth();return e.setFullYear(e.getFullYear(),t+1,0),e.setHours(23,59,59,999),e}function q(n){j(1,arguments);var e=z(n);return M(e).getTime()===T(e).getTime()}function I(n,e){j(2,arguments);var t,r=z(n),o=z(e),a=D(r,o),i=Math.abs(S(r,o));if(i<1)t=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-a*i);var s=D(r,o)===-a;q(z(n))&&1===i&&1===D(n,o)&&(s=!1),t=a*(i-Number(s))}return 0===t?0:t}function P(n,e){return j(2,arguments),z(n).getTime()-z(e).getTime()}var N={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(n){return n<0?Math.ceil(n):Math.floor(n)}};function L(n){return n?N[n]:N.trunc}function W(n,e,t){j(2,arguments);var r=P(n,e)/1e3;return L(null==t?void 0:t.roundingMethod)(r)}var U={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function F(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const Y={date:F({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:F({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:F({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var O={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function R(n){return function(e,t){var r,o=t||{};if("formatting"===(o.context?String(o.context):"standalone")&&n.formattingValues){var a=n.defaultFormattingWidth||n.defaultWidth,i=o.width?String(o.width):a;r=n.formattingValues[i]||n.formattingValues[a]}else{var s=n.defaultWidth,c=o.width?String(o.width):n.defaultWidth;r=n.values[c]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const X={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:R({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:R({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:R({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:R({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:R({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function J(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,s=a[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],A=Array.isArray(c)?$(c,(function(n){return n.test(s)})):H(c,(function(n){return n.test(s)}));i=n.valueCallback?n.valueCallback(A):A,i=t.valueCallback?t.valueCallback(i):i;var l=e.slice(s.length);return{value:i,rest:l}}}function H(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function $(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var Z,G={ordinalNumber:(Z={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(Z.matchPattern);if(!t)return null;var r=t[0],o=n.match(Z.parsePattern);if(!o)return null;var a=Z.valueCallback?Z.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=n.slice(r.length);return{value:a,rest:i}}),era:J({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:J({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:J({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:J({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:J({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const V={code:"en-US",formatDistance:function(n,e,t){var r,o=U[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:Y,formatRelative:function(n,e,t,r){return O[n]},localize:X,match:G,options:{weekStartsOn:0,firstWeekContainsDate:1}};function Q(n){return function(n,e){if(null==n)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in e=e||{})Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n}({},n)}function _(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var K=1440,nn=43200;function en(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};j(2,arguments);var r=t.locale||V;if(!r.formatDistance)throw new RangeError("locale must contain formatDistance property");var o=D(n,e);if(isNaN(o))throw new RangeError("Invalid time value");var a,i,s=Q(t);s.addSuffix=Boolean(t.addSuffix),s.comparison=o,o>0?(a=z(e),i=z(n)):(a=z(n),i=z(e));var c,A=W(i,a),l=(_(i)-_(a))/1e3,d=Math.round((A-l)/60);if(d<2)return t.includeSeconds?A<5?r.formatDistance("lessThanXSeconds",5,s):A<10?r.formatDistance("lessThanXSeconds",10,s):A<20?r.formatDistance("lessThanXSeconds",20,s):A<40?r.formatDistance("halfAMinute",null,s):A<60?r.formatDistance("lessThanXMinutes",1,s):r.formatDistance("xMinutes",1,s):0===d?r.formatDistance("lessThanXMinutes",1,s):r.formatDistance("xMinutes",d,s);if(d<45)return r.formatDistance("xMinutes",d,s);if(d<90)return r.formatDistance("aboutXHours",1,s);if(d<K){var u=Math.round(d/60);return r.formatDistance("aboutXHours",u,s)}if(d<2520)return r.formatDistance("xDays",1,s);if(d<nn){var m=Math.round(d/K);return r.formatDistance("xDays",m,s)}if(d<86400)return c=Math.round(d/nn),r.formatDistance("aboutXMonths",c,s);if((c=I(i,a))<12){var v=Math.round(d/nn);return r.formatDistance("xMonths",v,s)}var f=c%12,p=Math.floor(c/12);return f<3?r.formatDistance("aboutXYears",p,s):f<9?r.formatDistance("overXYears",p,s):r.formatDistance("almostXYears",p+1,s)}function tn(n,e){return j(1,arguments),en(n,Date.now(),e)}Math.pow(10,8);var rn=36e5;function on(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function an(n,e){j(1,arguments);var t=e||{},r=null==t.additionalDigits?2:on(t.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof n&&"[object String]"!==Object.prototype.toString.call(n))return new Date(NaN);var o,a=dn(n);if(a.date){var i=un(a.date,r);o=mn(i.restDateString,i.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var s,c=o.getTime(),A=0;if(a.time&&(A=fn(a.time),isNaN(A)))return new Date(NaN);if(!a.timezone){var l=new Date(c+A),d=new Date(0);return d.setFullYear(l.getUTCFullYear(),l.getUTCMonth(),l.getUTCDate()),d.setHours(l.getUTCHours(),l.getUTCMinutes(),l.getUTCSeconds(),l.getUTCMilliseconds()),d}return s=hn(a.timezone),isNaN(s)?new Date(NaN):new Date(c+A+s)}var sn={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},cn=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,An=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,ln=/^([+-])(\d{2})(?::?(\d{2}))?$/;function dn(n){var e,t={},r=n.split(sn.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?e=r[0]:(t.date=r[0],e=r[1],sn.timeZoneDelimiter.test(t.date)&&(t.date=n.split(sn.timeZoneDelimiter)[0],e=n.substr(t.date.length,n.length))),e){var o=sn.timezone.exec(e);o?(t.time=e.replace(o[1],""),t.timezone=o[1]):t.time=e}return t}function un(n,e){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=n.match(t);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:n.slice((r[1]||r[2]).length)}}function mn(n,e){if(null===e)return new Date(NaN);var t=n.match(cn);if(!t)return new Date(NaN);var r=!!t[4],o=vn(t[1]),a=vn(t[2])-1,i=vn(t[3]),s=vn(t[4]),c=vn(t[5])-1;if(r)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,s,c)?function(n,e,t){var r=new Date(0);r.setUTCFullYear(n,0,4);var o=7*(e-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(e,s,c):new Date(NaN);var A=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(gn[e]||(Cn(n)?29:28))}(e,a,i)&&function(n,e){return e>=1&&e<=(Cn(n)?366:365)}(e,o)?(A.setUTCFullYear(e,a,Math.max(o,i)),A):new Date(NaN)}function vn(n){return n?parseInt(n):1}function fn(n){var e=n.match(An);if(!e)return NaN;var t=pn(e[1]),r=pn(e[2]),o=pn(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,r,o)?t*rn+6e4*r+1e3*o:NaN}function pn(n){return n&&parseFloat(n.replace(",","."))||0}function hn(n){if("Z"===n)return 0;var e=n.match(ln);if(!e)return 0;var t="+"===e[1]?-1:1,r=parseInt(e[2]),o=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,o)?t*(r*rn+6e4*o):NaN}var gn=[31,null,31,30,31,30,31,31,30,31,30,31];function Cn(n){return n%400==0||n%4==0&&n%100!=0}const bn=document.querySelector(".btn-add-project"),En=document.querySelector(".btn-add-task"),Bn=document.querySelector(".project-form"),kn=document.querySelector("#project-name"),yn=document.querySelector(".add"),wn=document.querySelector(".cancel"),xn=document.querySelector(".projects-list"),jn=document.querySelector(".tasks-list"),zn=document.querySelector(".theme-switch"),Dn=document.querySelector(".add-task-form"),Sn=document.querySelector(".btn-cancel"),Mn=document.querySelector(".btn-save"),Tn=document.querySelector("#title"),qn=document.querySelector("#description"),In=document.querySelector("#date"),Pn=document.querySelector("#priority"),Nn=document.querySelector(".edit-task-form"),Ln=document.querySelector(".btn-edit-cancel"),Wn=document.querySelector(".btn-edit-save"),Un=document.querySelector("#edit-title"),Fn=document.querySelector("#edit-description"),Yn=document.querySelector("#edit-date"),On=document.querySelector("#edit-priority"),Rn=document.querySelector(".delete"),Xn=function(){Tn.value="",qn.value="",In.value="",Pn.value="medium"},Jn=function(){const n=new Date,e=(""+n.getDate()).padStart(2,"0"),t=(""+(n.getMonth()+1)).padStart(2,"0"),r=`${n.getFullYear()}-${t}-${e}`;In.value=r,Yn.value=r},Hn=function(){bn.classList.toggle("hidden"),Bn.classList.toggle("hidden")};zn.addEventListener("click",(function(){document.documentElement.classList.toggle("dark"),localStorage.getItem("dark")?localStorage.removeItem("dark"):localStorage.setItem("dark",!0)}));const $n=function(){xn.innerHTML="",f.projects.forEach((n=>{xn.insertAdjacentHTML("afterbegin",`<a href="#" class="project" data-id="${n.id}">${n.name}</a>`)})),Zn()},Zn=function(){const n=f.currentProjectID,e=Array.from(xn.children).find((e=>e.dataset.id===n));Array.from(xn.children).forEach((n=>n.classList.remove("active"))),e.classList.add("active")},Gn=function(){const{currentProjectID:n}=f;jn.innerHTML="",f.tasks.forEach((e=>{e.projectID===n&&jn.insertAdjacentHTML("beforeend",`\n      <div class="task" data-id="${e.id}">\n        <div class="check">\n          <input type="checkbox" />\n        </div>\n        <div class="task-details">\n          <div class="task-head">\n            <div class="task-title">${e.title}</div>\n            <div class="task-desc">${e.description}</div>\n          </div>\n          <div class="task-info">\n            <div class="task-due">${e.date}</div>\n            <div class="task-priority">P: ${e.priority}</div>\n          </div>\n          <button class="btn btn-edit">EDIT</button>\n        </div>\n      </div>\n      `)}))};bn.addEventListener("click",(function(){Hn(),kn.focus(),kn.value=""})),wn.addEventListener("click",Hn),yn.addEventListener("click",(function(){const n=kn.value;x(n),$n(),Gn(),kn.value="",Hn()})),xn.addEventListener("click",(function(n){n.target.classList.contains("project")&&(n.preventDefault(),f.setCurrentProject(n.target.dataset.id),Zn(),Gn())})),Mn.addEventListener("click",(function(){!function(n,e,t,r){const{currentProjectID:o}=f,a=new w(n,e,t,r,o);f.addTask(a)}(Tn.value,qn.value,""===In.value?"no date":tn(an(In.value),{addSuffix:!0}),Pn.value),Dn.classList.add("hidden"),Xn(),En.classList.remove("hidden"),Gn()})),En.addEventListener("click",(function(){Dn.classList.remove("hidden"),Tn.focus(),Jn(),En.classList.add("hidden")})),Sn.addEventListener("click",(function(){Dn.classList.add("hidden"),En.classList.remove("hidden"),Xn()})),jn.addEventListener("click",(function(n){var e;"INPUT"===n.target.tagName&&(e=n.target.closest(".task").dataset.id,f.deleteTask(e),setTimeout(Gn,250))})),jn.addEventListener("click",(function(n){if("BUTTON"!==n.target.tagName)return;const e=n.target.closest(".task").dataset.id,t=function(n){return f.getTask(n)}(e);f.currentTaskID=e,Un.value=t.title,Fn.value=t.description,On.value=t.priority,Jn(),Nn.classList.remove("hidden")})),Ln.addEventListener("click",(function(){Nn.classList.add("hidden")})),Wn.addEventListener("click",(function(n){const e=f.currentTaskID,t=Un.value,r=Fn.value,o=On.value;!function(n,e,t,r,o){f.editTask(n,e,t,r,o)}(e,t,r,""===Yn.value?"no date":tn(an(Yn.value),{addSuffix:!0}),o),Gn(),Nn.classList.add("hidden")})),Rn.addEventListener("click",(function(){f.projects=[],f.tasks=[],f.currentProjectID=[],f.saveToLocalStorage(),x("Inbox"),$n(),Zn(),Gn()})),localStorage.getItem("projects")?f.loadProjects():x("Inbox"),localStorage.getItem("tasks")&&f.loadTasks(),localStorage.getItem("currentProjectID")&&f.loadCurrentProjectID(),localStorage.getItem("dark")&&document.documentElement.classList.add("dark")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,